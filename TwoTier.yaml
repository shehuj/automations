AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Adventure Works — Two-Tier Joomla stack: VPC (2 public / 2 private subnets),
  EC2 web server (Ubuntu + Apache/PHP + Joomla), and RDS MySQL in private subnets.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: key
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server.
  WebServerInstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t2.micro, t3.micro, t3.small, t3.medium]
    Description: EC2 instance type for web server.
  WebServerAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: SSM parameter name for Ubuntu AMI (Jammy 22.04). Modify if you prefer a different AMI.
  VpcCidr:
    Type: String
    Default: 10.10.0.0/16
    Description: VPC CIDR block.
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues: [db.t3.micro, db.t3.small, db.t3.medium, db.t2.micro, db.t2.small]
  DBAllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 65536
    Description: RDS allocated storage (GB).
  DBEngineVersion:
    Type: String
    Default: "8.0"
    Description: MySQL engine major version.
  DBName:
    Type: String
    Default: joomladb
    Description: Name of the Joomla database (created on RDS).
  DBMasterUsername:
    Type: String
    Default: joomlaadmin
    Description: Master DB username.
  DBMasterUserPassword:
    Type: String
    NoEcho: true
    Description: Master DB password (NoEcho=true).
  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: The IP range that can SSH to the EC2 instance (recommend restricting to your IP).

Mappings:
  # Optional: map region-specific values here if desired.

Resources:

  ## Networking
  AdventureVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: adventure-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: adventure-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AdventureVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AdventureVPC
      Tags:
        - Key: Name
          Value: public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AdventureVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AdventureVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AdventureVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AdventureVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-2

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH to web server
      VpcId: !Ref AdventureVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: web-sg

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from web server
      VpcId: !Ref AdventureVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: rds-sg

  ## DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS (private)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DBSubnetGroupName: !Sub adventure-db-subnets-${AWS::StackName}

  ## RDS MySQL instance
  JoomlaDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub joomla-db-${AWS::StackName}
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      StorageType: gp2
      BackupRetentionPeriod: 7
      MultiAZ: false
      Tags:
        - Key: Name
          Value: joomla-rds

  ## IAM Role / Instance Profile (optional minimal)
  WebInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Metadata:
      Comment: "SSM managed instance profile for remote management (optional)."

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebInstanceProfileRole

  ## Web server EC2 instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref WebServerInstanceType
      ImageId: !Ref WebServerAmi
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref WebInstanceProfile
      Tags:
        - Key: Name
          Value: joomla-web-server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y apache2 php php-mysql libapache2-mod-php unzip wget curl
          systemctl enable apache2
          systemctl start apache2

          # Create MYSQL client connection details file for Joomla installer
          DB_HOST=${JoomlaDB.Endpoint.Address}
          DB_NAME=${DBName}
          DB_USER=${DBMasterUsername}
          DB_PASS=${DBMasterUserPassword}

          # Download latest Joomla package (if link changes, replace accordingly)
          cd /var/www/html
          rm -rf *
          # attempt to download latest Joomla package from official downloads site
          wget -O joomla.zip "https://downloads.joomla.org/latest" || true
          unzip joomla.zip || true
          # set ownership and permissions
          chown -R www-data:www-data /var/www/html
          find /var/www/html -type d -exec chmod 755 {} \;
          find /var/www/html -type f -exec chmod 644 {} \;

          # create a small marker file with DB endpoint (for testing)
          echo "Joomla RDS endpoint: ${JoomlaDB.Endpoint.Address}" > /var/www/html/dbinfo.txt
          # Security reminder: remove installation directory after you finish initial setup
          # (the Joomla web-based installer will create configuration.php — remove installer dir as recommended)

  ## Elastic IP (optional) - Comment out if you prefer dynamic public IP
  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WebServerInstance

Outputs:
  WebServerPublicIP:
    Description: Public IPv4 address of the web server
    Value: !GetAtt WebServerEIP.PublicIp

  WebsiteURL:
    Description: URL to reach the Joomla site (HTTP)
    Value: !Sub http://${WebServerPublicIP}/

  RDSAddress:
    Description: RDS endpoint address (use to connect from the web server or management hosts)
    Value: !GetAtt JoomlaDB.Endpoint.Address

  RDSPort:
    Description: RDS endpoint port
    Value: !GetAtt JoomlaDB.Endpoint.Port